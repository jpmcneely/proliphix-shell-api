#!/bin/bash

# tstatctl - Somewhat useful control script for Proliphix NT20e
#            thermostat.
# Version 1.0 - 2013-11-30
# Copyright (C) 2013 - J.P. McNeely
#
# This script will serve as a somewhat-useful control program, but
# is primarily intended as an example of the API calls.
#
# GPL 2.0 License - See LICENSE for redistribution requirements.

# Source the configuration
. ./tstatconf.inc

# Source the API Implementation
. ./tstatapi.inc

if [ ! ${1} ]; then
  echo "usage: $0 COMMAND [OPTIONS]"
  echo " "
  echo "Available Commands:"
  echo "General:"
  echo "    status          : View Full Status"
  echo "Settings:"
  echo "    setname         : Set Device Name"
  echo "    sethvacmode     : Set HVAC Mode"
  echo "    setfanmode      : Set Fan Mode"
  echo "    setheat         : Set Heat SetPoint"
  echo "    setcool         : Set Cool SetPoint"
  echo "    setsetback      : Set Setback Status (Hold or Reset Manual Setpoints)"
  echo "    setsensoroffset : Set Remote Sensor Temp Offset"
  echo "    setsensorname   : Set Remote Sensor Name"
  echo "    setsensorstate  : Set Sensor State"
  echo "    setsensoravg    : Set Sensor Average Inclusion"
  echo "    setsensortype   : Set Remote Sensor Type"
  echo "    setusage        : Set Usage Minutes for HVAC/Fan States"
  echo "    resetusage      : Set Last Usage Reset to Current Date/Time"
  echo "Alarms:"
  echo "    lowtempalarm  : Get Zone Low Temp Alarm Status"
  echo "    hightempalarm : Get Zone High Temp Alarm Status"
  echo "    filteralarm   : Get Filter Reminder Alarm Status"
  echo "    lowtempclear  : Clear Zone Low Temp Alarm"
  echo "    hightempclear : Clear Zone High Temp Alarm"
  echo "    filterclear   : Clear Filter Reminder Alarm"
  echo " "
  echo "Use $0 COMMAND for available options."
  echo " "
  exit 1
fi

CMD=${1}

# Full Status
if [ $CMD = "status" ]; then
  MODEL=`readSystemMimModelNumber`
  SWVER=`readSWVer`
  HWVER=`readHWVer`
  SERIAL=`readSerialNo`
  MACADDRESS=`readMacAddress`
  IPADDRESS=`readIPAddress`
  NETMASK=`readNetmask`
  GATEWAY=`readGateway`
  LOCALTEMP=`readThermSensorTemp Local`
  LOCALAVG=`readThermSensorAverage Local`
  RS1STATE=`readThermSensorState RS1`
  RS2STATE=`readThermSensorState RS2`
  LOWTEMPALRM=`readCommonAlarmStatus LowTemp`
  HIGHTEMPALRM=`readCommonAlarmStatus HighTemp`
  FILTERALRM=`readCommonAlarmStatus Filter`
  NAME=`readCommonDevName`
  SITENAME=`readSiteName`
  UPTIME=`readSystemUptime`
  SYSTIME=`readSystemTime`
  CURSCHEDPERIOD=`readThermCurrentPeriod`
  CURSCHEDCLASS=`readThermCurrentClass`
  CURACTIVEPERIOD=`readThermActivePeriod`
  AVGTEMP=`readThermAverageTemp`
  CURMODE=`readThermHvacMode`
  CURSTATE=`readThermHvacState`
  CURFANMODE=`readThermFanMode`
  CURFANSTATE=`readThermFanState`
  CURHEATSETPOINT=`readThermSetbackHeat`
  CURCOOLSETPOINT=`readThermSetbackCool`
  CURSETBACKSTATUS=`readThermSetbackStatus`
  HEAT1USAGE=`readThermHeat1Usage`
  HEAT2USAGE=`readThermHeat2Usage`
  HEAT3USAGE=`readThermHeat3Usage`
  COOL1USAGE=`readThermCool1Usage`
  COOL2USAGE=`readThermCool2Usage`
  FANUSAGE=`readThermFanUsage`
  USAGEOPTS=`readThermUsageOptions`
  USAGERESET=`readThermLastUsageResetDateTime`

  if [ $RS1STATE = "Enabled" ]; then
    RS1NAME=`readThermSensorName RS1`
    RS1TEMP=`readThermSensorTemp RS1`
    RS1AVG=`readThermSensorAverage RS1`
    RS1OFFSET=`readThermSensorCorrection RS1`
    RS1TYPE=`readThermSensorType RS1`
  fi

  if [ $RS2STATE = "Enabled" ]; then
    RS2NAME=`readThermSensorName RS2`
    RS2TEMP=`readThermSensorTemp RS2`
    RS2AVG=`readThermSensorAverage RS2`
    RS2OFFSET=`readThermSensorCorrection RS2`
    RS2TYPE=`readThermSensorType RS2`
  fi

  echo " "
  echo "Name/Site     : $NAME / $SITENAME"
  echo "Versions      : Model: $MODEL  SWRev: $SWVER  HWRev: $HWVER  Serial: $SERIAL"
  echo "MAC Address   : $MACADDRESS"
  echo "Networking    : IP: $IPADDRESS  Netmask: $NETMASK  Gateway: $GATEWAY"
  echo "Time          : $SYSTIME  Up: $UPTIME"
  echo "HVAC Mode     : $CURMODE"
  echo "HVAC State    : $CURSTATE"
  echo "Fan Mode      : $CURFANMODE"
  echo "Fan State     : $CURFANSTATE"
  echo "Main Temp     : ${LOCALTEMP}f"
  echo "Main Averaged : $LOCALAVG"
  echo "RS1 State     : $RS1STATE"
  if [ $RS1STATE = "Enabled" ]; then
  echo "RS1 Name      : $RS1NAME"
  echo "RS1 Type      : $RS1TYPE"
  echo "RS1 Temp      : ${RS1TEMP}f"
  echo "RS1 Averaged  : $RS1AVG"
  fi
  echo "RS2 State     : $RS2STATE"
  if [ $RS2STATE = "Enabled" ]; then
  echo "RS2 Name      : $RS2NAME"
  echo "RS2 Type      : $RS2TYPE"
  echo "RS2 Temp      : ${RS2TEMP}f"
  echo "RS2 Averaged  : $RS2AVG"
  fi
  if [ $RS1OFFSET != "0" ]; then
  echo "RS1 Offset    : ${RS1OFFSET}f"
  fi
  echo "Avg Temp      : ${AVGTEMP}f"
  echo "Heat SetPoint : ${CURHEATSETPOINT}f"
  echo "Cool SetPoint : ${CURCOOLSETPOINT}f"
  echo "Setback Status: $CURSETBACKSTATUS"
  echo "Sched Class   : $CURSCHEDCLASS"
  echo "Sched Period  : $CURSCHEDPERIOD"
  echo "Active Period : $CURACTIVEPERIOD"
  echo "Alarm Status  : LowTemp: $LOWTEMPALRM / HighTemp: $HIGHTEMPALRM / Filter: $FILTERALRM"
  echo "Usage         : Heat1: $HEAT1USAGE  Heat2: $HEAT2USAGE  Heat3: $HEAT3USAGE  Cool1: $COOL1USAGE  Cool2: $COOL2USAGE  Fan: $FANUSAGE"
  echo "Usage Options : $USAGEOPTS"
  echo "Usage Reset   : $USAGERESET"
  echo " "
fi

# Set Device Name
if [ $CMD = "setname" ]; then
  if [ ! ${2} ]; then
    echo "usage: $0 setname \"New+Name\""
    echo "       NOTE: Replace space with plus (+)"
    exit 1
  fi
  NEWNAME=$2
  writeCommonDevName $NEWNAME
  echo "Device Name Set to $NEWNAME" | tr "+" " "
fi

# Set HVAC Mode
if [ $CMD = "sethvacmode" ]; then
  if [ ! ${2} ]; then
    echo "usage: $0 sethvacmode Off|Heat|Cool|Auto"
    exit 1
  fi
  NEWMODE=$2
  SETMODE=`writeThermHvacMode $NEWMODE`
  echo "HVAC Mode Set to $SETMODE"
fi

# Set Fan Mode
if [ $CMD = "setfanmode" ]; then
  if [ ! ${2} ]; then
    echo "usage: $0 setfanmode Auto|On|Schedule"
    exit 1
  fi
  NEWMODE=$2
  SETMODE=`writeThermFanMode $NEWMODE`
  echo "Fan Mode Set to $SETMODE"
fi

# Set Heat SetPoint
if [ $CMD = "setheat" ]; then
  if [ ! ${2} ]; then
    echo "usage: $0 setheat TEMPERATURE"
    echo "       Ex.: $0 setheat 68.0"
    exit 1
  fi
  NEWTEMP=$2
  SETHEAT=`writeThermSetbackHeat $NEWTEMP`
  echo "Heat Set to ${SETHEAT}f"
fi

# Set Cool SetPoint
if [ $CMD = "setcool" ]; then
  if [ ! ${2} ]; then
    echo "usage: $0 setcool TEMPERATURE"
    echo "       Ex.: $0 setcool 72.0"
    exit 1
  fi
  NEWTEMP=$2
  SETCOOL=`writeThermSetbackCool $NEWTEMP`
  echo "Cool Set to ${SETCOOL}f"
fi

# Set Setback Status
if [ $CMD = "setsetback" ]; then
  if [ ! ${2} ]; then
    echo "usage: $0 setsetback Normal|Hold"
    exit 1
  fi
  NEWMODE=$2
  SETBACKMODE=`writeThermSetbackStatus $NEWMODE`
  echo "Setback Set to $SETBACKMODE"
fi

# Get Filter Reminder Alarm Status
if [ $CMD = "filteralarm" ]; then
  readThermConfigFilterReminderPending
fi

# Get Zone Low Temp Alarm Status
if [ $CMD = "lowtempalarm" ]; then
  readThermConfigLowTempPending
fi

# Get Zone High Temp Alarm Status
if [ $CMD = "hightempalarm" ]; then
  readThermConfigHighTempPending
fi

# Clear Filter Reminder Alarm
if [ $CMD = "filterclear" ]; then
  # Do not send clear unless alarm is Yes
  STATUS=`readThermConfigFilterReminderPending`
  if [ $STATUS = "Yes" ]; then
    writeThermConfigFilterReminderPending
  else
    echo "No"
  fi
fi

# Clear Zone Low Temp Alarm
if [ $CMD = "lowtempclear" ]; then
  # Do not send clear unless alarm is Yes
  STATUS=`readThermConfigLowTempPending`
  if [ $STATUS = "Yes" ]; then
    writeThermConfigLowTempPending
  else
    echo "No"
  fi
fi

# Clear Zone High Temp Alarm
if [ $CMD = "hightempclear" ]; then
  # Do not send clear unless alarm is Yes
  STATUS=`readThermConfigHighTempPending`
  if [ $STATUS = "Yes" ]; then
    writeThermConfigHighTempPending
  else
    echo "No"
  fi
fi

# Set Remote Sensor Temp Offset
if [ $CMD = "setsensoroffset" ]; then
  if [ ! ${3} ]; then
    echo "usage: $0 setsensoroffset RS1|RS2 DEGREES"
    exit 1
  fi
  SENSOR=$2
  OFFSET=$3
  SENSOROFFSET=`writeThermSensorCorrection $SENSOR $OFFSET`
  echo "Sensor Correction for $SENSOR Set to $SENSOROFFSET"
fi

# Set Remote Sensor Name
if [ $CMD = "setsensorname" ]; then
  if [ ! ${3} ]; then
    echo "usage: $0 setsensorname RS1|RS2 \"New+Name\""
    echo "       NOTE: Replace space with plus (+)"
    exit 1
  fi
  SENSOR=$2
  NEWNAME=$3
  writeThermSensorName $SENSOR $NEWNAME
  echo "Sensor $SENSOR Name Set to $NEWNAME" | tr "+" " "
fi

# Set Sensor State
if [ $CMD = "setsensorstate" ]; then
  if [ ! ${3} ]; then
    echo "usage: $0 setsensorstate RS1|RS2 Enable|Disable"
    exit 1
  fi
  SENSOR=$2
  STATE=$3
  NEWSTATE=`writeThermSensorState $SENSOR $STATE`
  echo "Sensor $SENSOR Set to $NEWSTATE"
fi

# Set Sensor Avg
if [ $CMD = "setsensoravg" ]; then
  if [ ! ${3} ]; then
    echo "usage: $0 setsensoravg Local|RS1|RS2 Enable|Disable"
    exit 1
  fi
  SENSOR=$2
  STATE=$3
  NEWSTATE=`writeThermSensorAverage $SENSOR $STATE`
  echo "Sensor $SENSOR Average Inclusion Set to $NEWSTATE"
fi

# Set Sensor Type
if [ $CMD = "setsensortype" ]; then
  if [ ! ${3} ]; then
    echo "usage: $0 setsensortype RS1|RS2 Analog|Thermistor"
    exit 1
  fi
  SENSOR=$2
  TYPE=$3
  NEWTYPE=`writeThermSensorType $SENSOR $TYPE`
  echo "Sensor $SENSOR Type Set to $NEWTYPE"
fi

# Set Usage
if [ $CMD = "setusage" ]; then
  if [ ! ${3} ]; then
    echo "Usage: $0 setusage Heat1|Heat2|Heat3|Cool1|Cool2|Fan MINUTES"
    exit 1
  fi
  INVAL=$2
  INMIN=$3
  case $INVAL in
  "Heat1")
    NEWHEAT1=`writeThermHeat1Usage $INMIN`
    echo "Heat1 Usage Set to $NETHEAT1 Minutes"
    ;;
  "Heat2")
    NEWHEAT2=`writeThermHeat2Usage $INMIN`
    echo "Heat2 Usage Set to $NEWHEAT2 Minutes"
    ;;
  "Heat3")
    NEWHEAT3=`writeThermHeat3Usage $INMIN`
    echo "Heat3 Usage Set to $NEWHEAT3 Minutes"
    ;;
  "Cool1")
    NEWCOOL1=`writeThermCool1Usage $INMIN`
    echo "Cool1 Usage Set to $NEWCOOL1 Minutes"
    ;;
  "Cool2")
    NEWCOOL2=`writeThermCool2Usage $INMIN`
    echo "Cool2 Usage Set to $NEWCOOL2 Minutes"
    ;;
  "Fan")
    NEWFAN=`writeThermFanUsage $INMIN`
    echo "Fan Usage Set to $NEWFAN Minutes"
    ;;
  esac
fi

# Reset Last Usage
if [ $CMD = "resetusage" ]; then
  NEWLASTUSAGE=`writeThermLastUsageResetNow`
  echo "Last Usage Reset Set to $NEWLASTUSAGE"
  HEAT1=`writeThermHeat1Usage 0`
  HEAT2=`writeThermHeat2Usage 0`
  HEAT3=`writeThermHeat3Usage 0`
  COOL1=`writeThermCool1Usage 0`
  COOL2=`writeThermCool2Usage 0`
  FAN=`writeThermFanUsage 0`
  echo "Reset: Heat1: $HEAT1  Heat2: $HEAT2  Heat3: $HEAT3  Cool1: $COOL1  Cool2: $COOL2  Fan: $FAN"
fi

# EOF
